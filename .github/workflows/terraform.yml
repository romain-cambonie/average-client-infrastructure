name: Terraform

on:
  workflow_call:
    inputs:
      terraform-workspace:
        type: string
        required: true
    secrets:
      TF_API_TOKEN:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_ACCESS_KEY_SECRET :
        required: true
      GPG_SECRET_SIGNING_PASSPHRASE:
        required: true

jobs:
  setup-workspace-if-needed:
    uses: romain-cambonie/serenity-workflow-dev/.github/workflows/_setup-new-workspace-if-needed.terraform.reusable.yml@master
    with:
      organisation-name: 'average'
      workspace-name-with-prefix: client-${{ inputs.terraform-workspace }}
    secrets:
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_ACCESS_KEY_SECRET : ${{ secrets.AWS_ACCESS_KEY_SECRET }}
      GPG_SECRET_SIGNING_PASSPHRASE: ${{ secrets.GPG_SECRET_SIGNING_PASSPHRASE }}

      # Will create workspace on terraform cloud if it does not exist
      # Note: Will be simplified once https://github.com/hashicorp/terraform/pull/31633 will be merged
      # New syntax : terraform workspace select -or-create ${{ inputs.terraform-workspace }}
#      - name: Terraform Workspace select or create
#        if: steps.terraform-init.outcome == 'failure'
#        id: workspace-setup
#        run: terraform workspace new ${{ inputs.terraform-workspace }}

          #   echo >> {
          #   "data": {
          #     "id":"ws-DgsiZWtRctCdPZpi",
          #     "attributes": {
          #       "key":"AWS_SECRET_ACCESS_KEY",
          #       "value":"fsdhgjkghjmlhgd",
          #       "category":"env",
          #       "hcl": false,
          #       "sensitive": true
          #     },
          #     "type":"vars"
          #   }
        # }

  create-environment:
    needs:
      - setup-workspace-if-needed
    runs-on: ubuntu-latest
    steps:
      - name: Checkout client infrastructure repository
        uses: actions/checkout@v3
        with:
          repository: romain-cambonie/average-client-infrastructure

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        id: terraform-init
        run: terraform init
        env:
          TF_WORKSPACE: ${{ inputs.terraform-workspace }}

#      - name: Terraform Plan
#        id: plan
#        #if: github.event_name == 'pull_request'
#        run: terraform plan -no-color -input=false
#        continue-on-error: true
#        env:
#          TF_WORKSPACE: ${{ steps.terraform-workspace-name.outputs.value }}
#
#      - name: Update Pull Request
#        uses: actions/github-script@v6.0.0
#        #if: github.event_name == 'pull_request'
#        env:
#          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
#        with:
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#          script: |
#            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
#            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.terraform-init.outcome }}\`
#            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
#            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
#
#            <details><summary>Show Plan</summary>
#
#            \`\`\`\n
#            ${process.env.PLAN}
#            \`\`\`
#
#            </details>
#
#            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
#
#            github.rest.issues.createComment({
#              issue_number: context.issue.number,
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              body: output
#            })
#      - name: Terraform Plan Status
#        if: steps.plan.outcome == 'failure'
#        run: exit 1
#      - name: Terraform Apply
#        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#        run: terraform apply -auto-approve -input=false
#        env:
#          TF_WORKSPACE: production