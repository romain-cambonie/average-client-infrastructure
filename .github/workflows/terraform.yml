name: Terraform

on:
  workflow_call:
    inputs:
      terraform-workspace:
        type: string
        required: true
    secrets:
      TF_API_TOKEN:
        required: true

jobs:
  create-environment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout client infrastructure repository
        uses: actions/checkout@v3
        with:
          repository: romain-cambonie/average-client-infrastructure

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check

      # Terraform init will create workspace on terraform cloud if it does not exist
      - name: Terraform Init
        id: terraform-init
        run: terraform init
        env:
          TF_WORKSPACE: ${{ inputs.terraform-workspace }}

        #   echo >> {
        #   "data": {
        #     "id":"ws-DgsiZWtRctCdPZpi",
        #     "attributes": {
        #       "key":"AWS_SECRET_ACCESS_KEY",
        #       "value":"fsdhgjkghjmlhgd",
        #       "category":"env",
        #       "hcl": false,
        #       "sensitive": true
        #     },
        #     "type":"vars"
        #   }
        # }

        # We need to have valid aws credentials in the workspace to be able to use the provider.
#      - name: Set AWS credentials
#        env:
#          TERRAFORM_BEARER_TOKEN: ${{ secrets.TF_API_TOKEN }}
#        run: |
#          touch payload.json
#          jq '{ data: { id: "ws-DgsiZWtRctCdPZpi", attributes: { key: "AWS_SECRET_ACCESS_KEY", value:"fsdhgjkghjmlhgd" }, type: "vars" } }' > payload.json
#          curl \
#          --header "Authorization: Bearer $TERRAFORM_BEARER_TOKEN" \
#          --header "Content-Type: application/vnd.api+json" \
#          --request POST \
#          --data @payload.json \
#          https://app.terraform.io/api/v2/vars
#
#      - name: Terraform Plan
#        id: plan
#        #if: github.event_name == 'pull_request'
#        run: terraform plan -no-color -input=false
#        continue-on-error: true
#        env:
#          TF_WORKSPACE: ${{ steps.terraform-workspace-name.outputs.value }}
#
#      - name: Update Pull Request
#        uses: actions/github-script@v6.0.0
#        #if: github.event_name == 'pull_request'
#        env:
#          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
#        with:
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#          script: |
#            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
#            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.terraform-init.outcome }}\`
#            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
#            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
#
#            <details><summary>Show Plan</summary>
#
#            \`\`\`\n
#            ${process.env.PLAN}
#            \`\`\`
#
#            </details>
#
#            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
#
#            github.rest.issues.createComment({
#              issue_number: context.issue.number,
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              body: output
#            })

#      - name: Terraform Plan Status
#        if: steps.plan.outcome == 'failure'
#        run: exit 1
#      - name: Terraform Apply
#        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#        run: terraform apply -auto-approve -input=false
#        env:
#          TF_WORKSPACE: production